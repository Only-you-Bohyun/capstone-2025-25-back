name: BE CI / CD with Docker

on:
  push:
    branches:
      - master
      - develop
    paths:
      - 'backend/**'  # 백엔드 폴더 내부 파일이 변경될 때만 실행
jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup application.yml
        run: |
          cd ./src/main/resources
          
          touch ./application-actuator.yml
          touch ./application-config.yml
          touch ./application-jwt.yml
          touch ./application-swagger.yml
          touch ./application-oauth.yml
          touch ./application-db.yml
          
          echo "${{ secrets.APPLICATION_DB }}" >> ./application-db.yml
          echo "${{ secrets.APPLICATION_CONFIG }}" >> ./application-config.yml
          echo "${{ secrets.APPLICATION_JWT }}" >> ./application-jwt.yml
          echo "${{ secrets.APPLICATION_SWAGGER }}" >> ./application-swagger.yml
          echo "${{ secrets.APPLICATION_ACTUATOR }}" >> ./application-actuator.yml
          echo "${{ secrets.APPLICATION_OAUTH }}" >> ./application-oauth.yml
        shell: bash

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x test

      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/iambohyun:${{ github.sha }} .

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Hub Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/iambohyun:${{ github.sha }}

  deploy-to-ec2:
    needs: build-docker-image
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }} # EC2에서 whoami 명령어로 확인
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/iambohyun:${{ github.sha }}
            sudo docker stop iambohyun || true
            sudo docker rm iambohyun || true
            sudo docker run --name iambohyun --rm -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/iambohyun:${{ github.sha }}
            sudo docker image prune -f